import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.5'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'net.ltgt.errorprone' version '4.1.0'
}

group = 'io.github.bcarter97'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot gRPC'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'net.devh:grpc-server-spring-boot-starter:latest.release'
    implementation 'io.grpc:grpc-services:1.64.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    runtimeOnly 'ch.qos.logback:logback-classic:1.5.13'
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    errorprone 'com.google.errorprone:error_prone_core:2.30.0'
    errorprone 'com.uber.nullaway:nullaway:0.11.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Spotless formatting switched to google-java-format (widely adopted)
spotless {
    java {
        googleJavaFormat('1.22.0')
        // google-java-format already handles import sorting; keep only cleanup helpers
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
        targetExclude 'build/generated/**/*.java', 'build/generated/sources/**/*.java'
    }
}

// Lean Error Prone / NullAway setup
tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        option("NullAway:AnnotatedPackages", "io.github.bcarter97")
        error("NullAway")
        excludedPaths = ".*/build/generated/.*"
    }
    options.compilerArgs += ['-Werror']
}

// Keep spotlessCheck in overall check
tasks.named('check') { dependsOn(tasks.named('spotlessCheck')) }

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.25.3' }          // protoc version
    plugins {
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.64.0' }        // gRPC Java codegen
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins { grpc {} }
        }
    }
}

tasks.named('bootJar') {
    archiveFileName = 'app.jar'
}

springBoot {
    // keeps the build reproducible; layers are extracted by layertools
    buildInfo()
}

// Extract the layered JAR into build/layers/
tasks.register('extractBootLayers', Exec) {
    group = 'build'
    description = 'Extract Spring Boot layered JAR into build/layers for Docker layering.'

    dependsOn tasks.named('bootJar')

    // Output directory for the extracted layers
    def outDir = layout.buildDirectory.dir('layers')

    doFirst {
        mkdir(outDir.get().asFile)
    }

    // Run the Spring Boot "layertools" extractor in that directory
    workingDir outDir.get().asFile
    commandLine 'java',
            '-Djarmode=layertools',
            '-jar',
            tasks.named('bootJar', BootJar).get().archiveFile.get().asFile.absolutePath,
            'extract'
}